[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "_build_backend"
backend-path = ["."]

[project]
name = "galaxy-ng"
dynamic = ["version", "dependencies"]
description = "galaxy-ng plugin for the Pulp Project"
readme = "README.md"
license = {text = "GPLv2+"}
authors = [
    {name = "Red Hat, Inc.", email = "info@ansible.com"}
]
requires-python = ">=3.9"
classifiers = [
    "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
    "Operating System :: POSIX :: Linux", 
    "Framework :: Django",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

[project.urls]
Homepage = "https://github.com/ansible/galaxy_ng/"

[project.entry-points."pulpcore.plugin"]
galaxy_ng = "galaxy_ng:default_app_config"

[tool.setuptools]
py-modules = ["_build_commands", "_dynamic_dependencies"]
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["tests", "tests.*"]

[tool.setuptools.cmdclass]
prepare_static = "_build_commands.PrepareStaticCommand"
build_py = "_build_commands.BuildPyCommand"
sdist = "_build_commands.SDistCommand"

# Dynamic version and dependencies metadata is handled by the custom build backend
# See _build_backend.py, _build_commands.py, and _dynamic_dependencies.py

[tool.black]
line-length = 100
target-version = ["py36", "py37"]
exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | _build
  | build
  | dist
  | migrations
)/
'''

[tool.darker]
src = [
    "galaxy_ng",
]
revision = "origin/main..."
isort = true
lint = [
    "flake8 --config flake8.cfg",
]
log_level = "INFO"
line_length = 100


[tool.check-manifest]
ignore = [
    ".gitleaks.toml",
    ".bumpversion.cfg",
    "CHANGES/**",
    "CONTRIBUTING.rst",
    "HISTORY.rst",
    "dev_requirements.txt",
    "doc_requirements.txt",
    "functest_requirements.txt",
    "unittest_requirements.txt",
    "requirements/**",
    "docs/**",
    "galaxy_ng/tests/assets/**",
    "flake8.cfg",
    "template_config.yml",
    ".travis/**",
    ".travis.yml",
    ".flake8",
    ".pep8speaks.yml",
    ".ci/**",
    ".github/**",
    "dev/**",
    "docker/**",
    "openshift/**",
    "galaxy_ng/app/static/**",
    ".compose.env.example",
    ".dockerignore",
    "COMMITMENT",
    "Dockerfile",
    "Makefile",
    "ROADMAP.rst",
    "ansible.cfg",
    "build_deploy.sh",
    "compose",
    "pr_check.sh",
    "lint_requirements.txt",
    "profiles/**",
    "_build_commands.py",
    "_dynamic_dependencies.py",
    "_build_backend.py",
    "setup.py",
]

# NOTE: setup.py is auto generated by the custom build backend.

# ---------------------------------------------------------
# Coverage
# ---------------------------------------------------------

[tool.coverage.run]
relative_files = true
data_file = "/tmp/.coverage"
omit = [
	"galaxy_ng/_vendor/*",
	"galaxy_ng/tests/*",
]

# ---------------------------------------------------------
# Ruff
# ---------------------------------------------------------
[tool.ruff]
line-length = 100
extend-exclude = [
    "galaxy_ng/_vendor/",
    ".venv/",
    ".venv*/*",
]

[tool.ruff.lint]
select = [
    # pyflakes
    "F",
    # pycodestyle errors
    "E",
    # pycodestyle warnings
    "W",
    # flake8-builtins
    "A",
    # flake8-bugbear
    "B",
    # flake8-comprehensions
    "C4",
    # flake8-commas
    "COM",
    # flake8-datetime
    "DTZ",
    # flake8-import-conventions
    "ICN",
    # flake8-executable
    "EXE",
    # flake8-no-pep420
    "INP",
    # flake8-gettext
    "INT",
    # flake8-logging
    "LOG",
    # pyupgrade
    "UP",
    # flake8-pie
    "PIE",
    # flake8-pytest-style
    "PT",
    # flake8-pyi
    "PYI",
    # ruff specific rules
    "RUF",
    # flake8-simplify
    "SIM",
    # flake8-debugger
    "T10",
    # flake8-todos
    "TD"
]
extend-ignore = [
    # B904 requires using `raise ... from ...` to explicitly tell what to do with "parent"
    # exception. Would be nice to fix, but ignoring for now.
    "B904",
    # COM812 Trailing comma missing
    # Too many changes to enforce
    "COM812",
    # UP032 Use f-string instead of `format` call.
    # No need to replace all str.format usage with f-strings in entire codebase.
    "UP032",
    # PT009 Use a regular `assert` instead of unittest-style
    # Ignoring, since we have mixed pytest and legacy unittest styled tests
    "PT009",
    # RUF012 Mutable class attributes should be annotated with `typing.ClassVar`
    # We don't enforce type annotations at the moment.
    "RUF012",
    # RUF100 Unused `noqa` directive
    # False positives on rules not enabled in ruff, but enabled in flake8.
    "RUF100",
    # SIM108 Use ternary operator instead of `if`-`else`-block
    # Opinionated, ternary operators may reduce readability.
    "SIM108",
    # TD001 Invalid TODO tag
    # We use TODO, FIXME and REVIEW tags
    "TD001",
    # TD003 Missing issue link on the line following this TODO
    # We don't create issues for TODOs
    "TD003",
    # RUF010 [*] Use explicit conversion flag e.g repr(x)
    "RUF010",
]

[tool.ruff.lint.per-file-ignores]
# The `galaxy_ng` is the only top-level package. No other directory contains python packages.
"!galaxy_ng/**" = ["INP", "EXE"]
# Ignore "E501 Line too long" in migrations, since most of the warnings
# are due to autogenerated code.
"galaxy_ng/app/migrations/*" = ["E501"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.bumpversion]

current_version = "4.11.0dev"
commit = false
tag = false
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)((?P<release>[a-z]+))?((?P<build>\\d+))?"
serialize = [
  "{major}.{minor}.{patch}{release}{build}",
  "{major}.{minor}.{patch}{release}",
  "{major}.{minor}.{patch}",
]

[tool.bumpversion.parts.release]

optional_value = "stable"
first_value = "dev"
values = [
  "dev",
  "a",
  "b",
  "stable"
]

[tool.bumpversion.parts.build]

first_value = 0

[[tool.bumpversion.files]]

filename = "./galaxy_ng/app/__init__.py"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""

[[tool.bumpversion.files]]

filename = "./galaxy_ng/__init__.py"
search = "__version__ = \"{current_version}\""
replace = "__version__ = \"{new_version}\""

[[tool.bumpversion.files]]

filename = "./_dynamic_dependencies.py"
search = "version = \"{current_version}\""
replace = "version = \"{new_version}\""
