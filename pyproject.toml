[tool.towncrier]
package = "galaxy_ng"
filename = "CHANGES.md"
directory = "CHANGES/"
title_format = "## {version} ({project_date}) {{: #{version} }}"
template = "CHANGES/.TEMPLATE.md"
issue_format = "[#{issue}](https://github.com/ansible/galaxy_ng/issues/{issue})"
start_string = "[//]: # (towncrier release notes start)\n"
underlines = ["", "", ""]


[tool.black]
line-length = 100
target-version = ["py36", "py37"]
exclude = '''
/(
    \.eggs
  | \.git
  | \.venv
  | _build
  | build
  | dist
  | migrations
)/
'''


[tool.darker]
src = [
    "galaxy_ng",
]
revision = "master"
isort = true
lint = [
    "flake8 --config flake8.cfg",
]
log_level = "INFO"
line_length = 100


[tool.check-manifest]
ignore = [
    ".gitleaks.toml",
    ".bumpversion.cfg",
    "CHANGES/**",
    "CONTRIBUTING.rst",
    "HISTORY.rst",
    "dev_requirements.txt",
    "doc_requirements.txt",
    "functest_requirements.txt",
    "unittest_requirements.txt",
    "requirements/**",
    "docs/**",
    "galaxy_ng/tests/assets/**",
    "flake8.cfg",
    "template_config.yml",
    ".travis/**",
    ".travis.yml",
    ".flake8",
    ".pep8speaks.yml",
    ".ci/**",
    ".github/**",
    "dev/**",
    "docker/**",
    "openshift/**",
    "galaxy_ng/app/static/**",
    ".compose.env.example",
    ".dockerignore",
    "COMMITMENT",
    "Dockerfile",
    "Dockerfile.rhel8",
    "Makefile",
    "ROADMAP.rst",
    "ansible.cfg",
    "build_deploy.sh",
    "compose",
    "pr_check.sh",
    "lint_requirements.txt",
    "profiles/**",
    "galaxy_ng/_vendor/**",
]

[tool.tox]
legacy_tox_ini = """
    [tox]
    min_version = 4.0
    no_package = true
    env_list =
        py311
    
    [testenv]
    allowlist_externals = sh
    usedevelop = True
    deps =
        -r unittest_requirements.txt
        epdb
    setenv =
        LOCK_REQUIREMENTS=0
        DJANGO_SETTINGS_MODULE=pulpcore.app.settings
        PULP_DATABASES__default__ENGINE=django.db.backends.postgresql
        PULP_DATABASES__default__NAME=galaxy_ng
        PULP_DATABASES__default__USER=galaxy_ng
        PULP_DATABASES__default__PASSWORD=galaxy_ng
        PULP_DATABASES__default__HOST=localhost
        PULP_DATABASES__default__PORT=5433
        #PULP_INSTALLED_APPS="[galaxy_ng]"
        PULP_DB_ENCRYPTION_KEY=/tmp/database_fields.symmetric.key
        PULP_RH_ENTITLEMENT_REQUIRED=insights
        PULP_DEPLOY_ROOT=/tmp/pulp
        PULP_STATIC_ROOT=/tmp/pulp
        PULP_WORKING_DIRECTORY=/tmp/pulp/tmp
        PULP_MEDIA_ROOT=/tmp/pulp/media
        PULP_FILE_UPLOAD_TEMP_DIR=/tmp/pulp/artifact-tmp
    commands = 
        sh -c ' \
            docker compose -f dev/compose/aap.yaml up --force-recreate -d postgres && \
            docker compose -f dev/compose/aap.yaml exec postgres bash -c "while ! pg_isready -U galaxy_ng; do sleep 1; done" && \
            rm -rf /tmp/pulp && \
            mkdir -p /tmp/pulp && \
            mkdir -p /tmp/pulp/tmp && \
            mkdir -p /tmp/pulp/artifact-tmp && \
            mkdir -p /tmp/pulp/media && \
            mkdir -p /tmp/pulp/assets && \
            if [ ! -f /tmp/database_fields.symmetric.key ]; then \
                openssl rand -base64 32 > /tmp/database_fields.symmetric.key; \
            fi && \
            if [ -d ../django-ansible-base ]; then pip install -e ../django-ansible-base; fi && \
            (pip show galaxy_ng || pip install -e .) && \
            if [ -d ../pulpcore ]; then pip install -e ../pulpcore; fi && \
            if [ -d ../pulp_ansible ]; then pip install -e ../pulp_ansible; fi && \
            if [ -d ../galaxy-importer ]; then pip install -e ../galaxy-importer; fi && \
            if [ -d ../dynaconf ]; then pip install -e ../dynaconf; fi && \
            if [ -d ../django ]; then pip install -e ../django; fi && \
            if [ -d ../django-rest-framework ]; then pip install -e ../django-rest-framework; fi && \
            pytest \
                --log-cli-level=DEBUG \
                --capture=no -v \
                -p 'no:pulpcore' \
                -p 'no:pulp_ansible' \
                --cov-report xml:coverage.xml \
                --cov=galaxy_ng \
                --junit-xml=/tmp/galaxy_ng-test-results.xml \
                --pyargs "galaxy_ng.tests.unit" \
        '
"""

[tool.coverage.run]
relative_files = true
data_file = "/tmp/.coverage"
omit = [
	"galaxy_ng/_vendor/*",
	"galaxy_ng/tests/*",
]
