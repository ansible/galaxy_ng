---
name: galaxy_ng/ci
on: {pull_request: {branches: ['**']}, push: {branches: ['**']}}

jobs:

  lint_po:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.after }}  # for PR avoids checking out merge commit
          fetch-depth: 0  # include all history

      - name: intsall and run lint-po
        run: |
          pip install lint-po
          lint-po ./galaxy_ng/locale/*/LC_MESSAGES/*.po

  lint:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.after }}  # for PR avoids checking out merge commit
          fetch-depth: 0  # include all history

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install requirements
        run: pip3 install -r lint_requirements.txt

      - name: Run extra lint checks
        run: "[ ! -x .ci/scripts/extra_linting.sh ] || .ci/scripts/extra_linting.sh"

      - name: Check manifest
        run: check-manifest

      - name: Check for pulpcore imports outside of pulpcore.plugin
        run: sh .ci/scripts/check_pulpcore_imports.sh

      - name: Check for gettext problems
        run: sh .ci/scripts/check_gettext.sh

  test:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - uses: actions/checkout@v4

      - name: install ansible
        run: pip3 install ansible

      - name: install python-requests
        run: pip3 install requests

      - name: run the build container playbook
        run: cd dev/playbooks; ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook -i 'localhost,' --forks=1 -v build_container.yaml

      - name: run the start container playbook
        run: cd dev/playbooks; ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook -i 'localhost,' --forks=1 -v start_container.yaml

      - name: run the unit test playbook
        run: cd dev/playbooks; ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook -i 'localhost,' --forks=1 -v run_unit_tests.yaml

      - name: upload jUnit XML test results
        if: github.event_name == 'push' && github.repository == 'ansible/galaxy_ng' && github.ref_name == 'master'
        continue-on-error: true
        run: >-
          docker exec pulp /bin/bash -c 'curl -v --user "${{ vars.PDE_ORG_RESULTS_AGGREGATOR_UPLOAD_USER }}:${{ secrets.PDE_ORG_RESULTS_UPLOAD_PASSWORD }}"
          --form "xunit_xml=@/tmp/galaxy_ng-test-results.xml"
          --form "component_name=hub"
          --form "git_commit_sha=${{ github.sha }}"
          --form "git_repository_url=https://github.com/${{ github.repository }}"
          "${{ vars.PDE_ORG_RESULTS_AGGREGATOR_UPLOAD_URL }}/api/results/upload/"'


      # FIXME: do we really care about these anymore ... ?
      #- name: run the functional test playbook
      #  run: cd dev/playbooks; ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook -i 'localhost,' --forks=1 -v run_functional_tests.yaml
