# WARNING: DO NOT EDIT!
#
# This file was generated by plugin_template, and is managed by it. Please use
# './plugin-template --github galaxy_ng' to update this file.
#
# For more info visit https://github.com/pulp/plugin_template

---
name: Galaxy Release Pipeline
on:
  workflow_dispatch:
    inputs:
      release:
        description: "Release tag (e.g. 3.2.1)"

defaults:
  run:
    working-directory: "galaxy_ng"

jobs:
  build-artifacts:
    runs-on: "ubuntu-latest"

    strategy:
      fail-fast: false

    steps:
      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 0
          path: "galaxy_ng"

      - uses: "actions/setup-python@v4"
        with:
          python-version: "3.8"

      - name: "Install python dependencies"
        run: |
          echo ::group::PYDEPS
          pip install 'packaging~=21.3' bump2version gitpython towncrier wheel requests
          echo ::endgroup::

      - name: "Configure Git with ansible name and email"
        run: |
          git config --global user.name 'ansible'
          git config --global user.email 'ansible-infra@redhat.com'

      - name: "Setting secrets"
        run: |
          python3 .github/workflows/scripts/secrets.py "$SECRETS_CONTEXT"
        env:
          SECRETS_CONTEXT: "${{ toJson(secrets) }}"

      - name: "Create the release commit, tag it, create a post-release commit, and build plugin package"
        run: |
          python .github/workflows/scripts/release.py ${{ github.event.inputs.release }}

      - name: "Upload Package whl"
        uses: "actions/upload-artifact@v3"
        with:
          name: "plugin_package"
          path: "galaxy_ng/dist/"
          if-no-files-found: "error"

      - name: "Tar files"
        run: |
          tar -cvf galaxy_ng.tar .

      - name: "Upload Artifact"
        uses: "actions/upload-artifact@v3"
        with:
          name: "galaxy_ng.tar"
          path: "galaxy_ng/galaxy_ng.tar"


  build-bindings-docs:
    needs:
      - "build-artifacts"
    runs-on: "ubuntu-latest"
    # Install scripts expect TEST to be set, 'docs' is most appropriate even though we don't run tests
    env:
      TEST: "docs"

    steps:
      - uses: "actions/download-artifact@v3"
        with:
          name: "galaxy_ng.tar"
          path: "galaxy_ng/"

      - uses: "actions/checkout@v4"
        with:
          fetch-depth: 1
          repository: "pulp/pulp-openapi-generator"
          path: "pulp-openapi-generator"

      - uses: "actions/setup-python@v4"
        with:
          python-version: "3.9"

      - name: "Untar repository"
        run: |
          tar -xf galaxy_ng.tar

      - name: "Install python dependencies"
        run: |
          echo ::group::PYDEPS
          pip install towncrier twine wheel httpie docker netaddr boto3 ansible mkdocs
          echo "HTTPIE_CONFIG_DIR=$GITHUB_WORKSPACE/galaxy_ng/.ci/assets/httpie/" >> $GITHUB_ENV
          echo ::endgroup::

      # Building the bindings and docs requires accessing the OpenAPI specs endpoint, so we need to
      # setup the Pulp instance.
      - name: "Before Install"
        run: |
          .github/workflows/scripts/before_install.sh
        shell: "bash"
        env:
          PY_COLORS: "1"
          ANSIBLE_FORCE_COLOR: "1"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GITHUB_CONTEXT: "${{ github.event.pull_request.commits_url }}"
          GITHUB_USER: "${{ github.event.pull_request.user.login }}"

      - name: "Install"
        run: |
          .github/workflows/scripts/install.sh
        shell: "bash"
        env:
          PY_COLORS: "1"
          ANSIBLE_FORCE_COLOR: "1"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          GITHUB_CONTEXT: "${{ github.event.pull_request.commits_url }}"
          GITHUB_USER: "${{ github.event.pull_request.user.login }}"

      - name: "Install Python client"
        run: |
          .github/workflows/scripts/install_python_client.sh
        shell: "bash"
      - name: "Upload python client packages"
        uses: "actions/upload-artifact@v3"
        with:
          name: "python-client.tar"
          path: "galaxy_ng/galaxy-python-client.tar"
          if-no-files-found: "error"

      - name: "Upload python client docs"
        uses: "actions/upload-artifact@v3"
        with:
          name: "python-client-docs.tar"
          path: "galaxy_ng/galaxy-python-client-docs.tar"
          if-no-files-found: "error"

      - name: "Logs"
        if: always()
        run: |
          echo "Need to debug? Please check: https://github.com/marketplace/actions/debugging-with-tmate"
          http --timeout 30 --check-status --pretty format --print hb "https://pulp${PULP_API_ROOT}api/v3/status/" || true
          docker images || true
          docker ps -a || true
          docker logs pulp || true
          docker exec pulp ls -latr /etc/yum.repos.d/ || true
          docker exec pulp cat /etc/yum.repos.d/* || true
          docker exec pulp bash -c "pip3 list && pip3 install pipdeptree && pipdeptree"


  publish-tag:
    runs-on: "ubuntu-latest"
    needs:
      - "build-bindings-docs"

    env:
      GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

    steps:
      - uses: "actions/download-artifact@v3"
        with:
          name: "galaxy_ng.tar"
          path: "galaxy_ng/"

      - name: "Untar repository"
        run: |
          tar -xf galaxy_ng.tar

      - name: "Configure Git with ansible name and email"
        run: |
          git config --global user.name 'ansible'
          git config --global user.email 'ansible-infra@redhat.com'

      - name: "Setting secrets"
        run: |
          python3 .github/workflows/scripts/secrets.py "$SECRETS_CONTEXT"
        env:
          SECRETS_CONTEXT: "${{ toJson(secrets) }}"

      - name: "Push branch and tag to GitHub"
        run: |
          bash .github/workflows/scripts/push_branch_and_tag_to_github.sh ${{ github.event.inputs.release }}

  create-gh-release:
    runs-on: "ubuntu-latest"
    needs:
      - "build-bindings-docs"
      - "publish-tag"

    steps:
      - name: "Create release on GitHub"
        uses: "actions/github-script@v7"
        env:
          TAG_NAME: "${{ inputs.release }}"
        with:
          script: |
            const { TAG_NAME } = process.env;

            await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: TAG_NAME,
              make_latest: "legacy",
            });
