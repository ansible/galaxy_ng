---
name: Galaxy Collection CI
on:
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - "CHANGES/**"
      - "docs/**"
      - "mkdocs.yml"
  push:
    branches:
      - "main"
      - "stable-*"
    tags:
      - '**'
  schedule:
    # * is a special character in YAML so you have to quote this string
    # runs at 3:00 UTC daily
    - cron: '00 3 * * *'
  workflow_dispatch:

env:
  PY_COLORS: '1'
  ANSIBLE_FORCE_COLOR: '1'

jobs:
  galaxy_collection:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout galaxy_ng
        uses: actions/checkout@v5

      - name: Setup python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: install ansible
        run: pip3 install ansible

      - name: Checkout the ansible_hub collection
        uses: actions/checkout@v5
        with:
          repository: ansible-collections/ansible_hub
          path: ansible_hub

      - name: copy galaxy.yml.j2 to ansible_hub
        run: |
          cp dev/galaxy_collection_plays/galaxy.yml.j2 ansible_hub

      - name: Build and install the collection
        working-directory: ansible_hub
        run: |
          # The ansible.cfg defined in the collection repository might break the test. We want the same variables for installation and running.
          rm -f ansible.cfg
          rm -f galaxy.yml
          ansible all -i localhost, -c local -m template -a "src=galaxy.yml.j2 dest=galaxy.yml" -e collection_namespace=ansible -e collection_name=hub -e collection_version=1.0.0 -e collection_repo=https://github.com/ansible-collections/ansible_hub
          ansible-galaxy collection build -vvv
          ansible-galaxy collection install ansible-hub-1.0.0.tar.gz -vvv

      - name: sudo apt update
        run: |
          sudo apt update

      - name: (Linux) Install docker compose
        run: |
          COMPOSE_VERSION=v2.34.0
          DOCKER_CONFIG=${DOCKER_CONFIG:-${HOME}/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          docker version
          docker compose version
      - name: Install python requirements and podman
        run: |
          sudo apt-get install -y libsasl2-dev python-dev-is-python3 libldap2-dev libssl-dev podman
          pip install requests

      - name: Checkout DAB branch if needed
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: .ci/scripts/get_dab_for_pr.py

      - name: Spin up dev/compose/standalone.yaml
        run: |
          USER_ID=$(id --user) docker compose -f dev/compose/standalone.yaml up --detach

      - name: Export environment variables to host
        run: |
          docker compose -f dev/compose/standalone.yaml exec manager /bin/bash -c 'env | grep -v -w "HOME"' >> $GITHUB_ENV

      - run: cat $GITHUB_ENV

      - name: Wait for manager service ready
        run: |
          echo "Waiting for manager service to be ready..."
          max_wait=90  # 1.5 minutes
          start_time=$(date +%s)
          CONTAINER_NAME="compose-manager-1"
          SERVICE_NAME="manager"

          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))

            if [ $elapsed -gt $max_wait ]; then
              echo "❌ Timeout after ${max_wait}s"
              echo "📋 Recent manager logs:"
              docker logs --tail=20 "$CONTAINER_NAME" 2>/dev/null || echo "Could not retrieve logs"
              docker compose -f dev/compose/standalone.yaml ps
              exit 1
            fi

            echo "⏱️  Checking $SERVICE_NAME logs for READY... (${elapsed}s elapsed)"

            # Check if container is running first
            if ! docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
              echo "🔴 $SERVICE_NAME: container not found or not running"
              sleep 2
              continue
            fi

            # Check logs for READY indicator
            if docker logs "$CONTAINER_NAME" 2>/dev/null | grep -q "### READY ###"; then
              echo "✅ $SERVICE_NAME is READY!"
              break
            else
              echo "🟡 $SERVICE_NAME: waiting for READY signal in logs"
              sleep 2
            fi
          done

      - name: Checking for uncommitted migrations...
        run: docker exec -t compose-manager-1 bash -c "django-admin makemigrations galaxy --check --dry-run"

      - name: create the test users+data
        run: docker exec -t compose-manager-1 bash -c 'cd /src/galaxy_ng; django-admin shell < ./dev/common/setup_test_data.py'

      - name: make messages
        run: docker exec -t compose-manager-1 bash -c 'cd /src/galaxy_ng/galaxy_ng; django-admin makemessages --all'

      - name: Test the user playbook
        run: ansible-playbook dev/galaxy_collection_plays/user.yml -vvv

      - name: Test the content playbook
        run: ansible-playbook dev/galaxy_collection_plays/content.yml -vvv

      - name: Test the repo playbook
        run: ansible-playbook dev/galaxy_collection_plays/repo.yml -vvv

      - name: Test the ee playbook
        run: ansible-playbook dev/galaxy_collection_plays/ee.yml -vvv

      - name: Logs
        if: always()
        run: |
          set +e
          docker ps -a
          echo ::group::MIGRATION_LOGS
          docker logs --tail=10000 compose-migrations-1
          echo ::endgroup::
          echo ::group::MANAGER_LOGS
          docker logs --tail=10000 compose-manager-1
          echo ::endgroup::
          echo ::group::WORKER_LOGS
          docker logs --tail=10000 compose-worker-1
          echo ::endgroup::
          echo ::group::CONTENT_LOGS
          docker logs --tail=10000 compose-content-1
          echo ::endgroup::
          echo ::group::API_LOGS
          docker logs --tail=10000 compose-api-1
          echo ::endgroup::
          echo ::group::DEPENDENCIES
          docker exec compose-manager-1 bash -c "pip list && pip install pipdeptree && pipdeptree"
          echo ::endgroup::
          curl -u "${{ env.DJANGO_SUPERUSER_USERNAME }}:${{ env.DJANGO_SUPERUSER_PASSWORD }}" -L http://localhost:5001${{ env.PULP_GALAXY_API_PATH_PREFIX }}pulp/api/v3/status/ | jq || true
