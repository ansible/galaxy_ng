# WARNING: DO NOT EDIT!
#
# This file was generated by plugin_template, and is managed by it. Please use
# './plugin-template --github galaxy_ng' to update this file.
#
# For more info visit https://github.com/pulp/plugin_template

---
name: Galaxy CI
on: {pull_request: {branches: ['*']}, push: {branches: ['*']}}
jobs:

  check_commit:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.after }}  # for PR avoids checking out merge commit
          fetch-depth: 0  # include all history

      - name: Run script to validate commits for both pull request and a push
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          GITHUB_PULL_REQUEST_BODY: ${{ github.event.pull_request.body }}
          GITHUB_BRANCH: ${{ github.head_ref }}
          GITHUB_REPO_SLUG: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}
          GITHUB_USER: ${{ github.event.pull_request.user.login }}
          GITHUB_PR_COMMITS_URL: ${{ github.event.pull_request.commits_url }}
          START_COMMIT: ${{ github.event.before }}
          END_COMMIT: ${{ github.event.after }}
        run: |
          python .ci/scripts/validate_commit_message_custom.py

  lint:
    runs-on: ubuntu-latest
    needs: check_commit

    steps:
      - uses: actions/checkout@v3
        with:
          # by default, it uses a depth of 1
          # this fetches all history so that we can read each commit
          fetch-depth: 0

      - uses: actions/setup-python@v3
        with:
          python-version: "3.8"

        # dev_requirements contains tools needed for flake8, etc.
      - name: Install requirements
        run: pip3 install -r dev_requirements.txt

      

      

      # Lint code.
      - name: Run flake8
        run: flake8 --config flake8.cfg

      - name: Run extra lint checks
        run: "[ ! -x .ci/scripts/extra_linting.sh ] || .ci/scripts/extra_linting.sh"

      # check for any files unintentionally left out of MANIFEST.in
      - name: Check manifest
        run: check-manifest

      - name: Check for pulpcore imports outside of pulpcore.plugin
        run: sh .ci/scripts/check_pulpcore_imports.sh

      - name: Check for gettext problems
        run: sh .ci/scripts/check_gettext.sh

  test:
    runs-on: ubuntu-latest
    # run only after lint finishes
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        env:
          - TEST: pulp
          - TEST: azure
          - TEST: s3
    outputs:
      deprecations-pulp: ${{ steps.deprecations.outputs.deprecations-pulp }}
      deprecations-azure: ${{ steps.deprecations.outputs.deprecations-azure }}
      deprecations-s3: ${{ steps.deprecations.outputs.deprecations-s3 }}

    steps:
      - uses: actions/checkout@v3
        with:
          # by default, it uses a depth of 1
          # this fetches all history so that we can read each commit
          fetch-depth: 0

      - uses: actions/setup-python@v3
        with:
          python-version: "3.8"

      - name: Install httpie
        run: |
          echo ::group::HTTPIE
          pip install httpie
          echo ::endgroup::
          echo "HTTPIE_CONFIG_DIR=$GITHUB_WORKSPACE/.ci/assets/httpie/" >> $GITHUB_ENV

      - name: Set environment variables
        run: |
          echo "TEST=${{ matrix.env.TEST }}" >> $GITHUB_ENV

      - name: Before Install
        
        run: .github/workflows/scripts/before_install.sh
        shell: bash
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          GITHUB_PULL_REQUEST_BODY: ${{ github.event.pull_request.body }}
          GITHUB_BRANCH: ${{ github.head_ref }}
          GITHUB_REPO_SLUG: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}
          GITHUB_USER: ${{ github.event.pull_request.user.login }}

      - name: Install
        
        run: .github/workflows/scripts/install.sh
        shell: bash
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          GITHUB_PULL_REQUEST_BODY: ${{ github.event.pull_request.body }}
          GITHUB_BRANCH: ${{ github.head_ref }}
          GITHUB_REPO_SLUG: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}
          GITHUB_USER: ${{ github.event.pull_request.user.login }}

      - name: Install Python client
        
        run: .github/workflows/scripts/install_python_client.sh
        shell: bash

      - name: Install Ruby client
        if: ${{ env.TEST == 'bindings' }}
        run: .github/workflows/scripts/install_ruby_client.sh
        shell: bash

      - name: Before Script
        
        run: .github/workflows/scripts/before_script.sh
        shell: bash
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          GITHUB_PULL_REQUEST_BODY: ${{ github.event.pull_request.body }}
          GITHUB_BRANCH: ${{ github.head_ref }}
          GITHUB_REPO_SLUG: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}
          GITHUB_USER: ${{ github.event.pull_request.user.login }}
          REDIS_DISABLED: ${{ contains('', matrix.env.TEST) }}

      - name: Setting secrets
        if: github.event_name != 'pull_request'
        run: python3 .github/workflows/scripts/secrets.py "$SECRETS_CONTEXT"
        env:
          SECRETS_CONTEXT: ${{ toJson(secrets) }}

      - name: Script
        
        run: .github/workflows/scripts/script.sh
        shell: bash
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          GITHUB_PULL_REQUEST_BODY: ${{ github.event.pull_request.body }}
          GITHUB_BRANCH: ${{ github.head_ref }}
          GITHUB_REPO_SLUG: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_CONTEXT: ${{ github.event.pull_request.commits_url }}
          GITHUB_USER: ${{ github.event.pull_request.user.login }}

      - name: Extract Deprecations from Logs
        id: deprecations
        run: echo "::set-output name=deprecations-${{ matrix.env.TEST }}::$(docker logs pulp 2>&1 | grep -i pulpcore.deprecation | base64 -w 0)"

      - name: Logs
        if: always()
        run: |
          echo "Need to debug? Please check: https://github.com/marketplace/actions/debugging-with-tmate"
          http --timeout 30 --check-status --pretty format --print hb "https://pulp${PULP_API_ROOT}api/v3/status/" || true
          docker images || true
          docker ps -a || true
          docker logs pulp || true
          docker exec pulp ls -latr /etc/yum.repos.d/ || true
          docker exec pulp cat /etc/yum.repos.d/* || true
          docker exec pulp pip3 list

  
  update_manifest:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: "Set GITHUB_BRANCH"
        run: |
          GITHUB_BRANCH=`sed 's/^refs\/heads\///' <<< $GITHUB_REF`
          echo "GITHUB_BRANCH=${GITHUB_BRANCH}" >> $GITHUB_ENV

      - name: Update Manifest for Ansible Hub UI
        env:
          GITHUB_PULL_REQUEST: ${{ github.event.number }}
          MANIFEST_PASSPHRASE: ${{ secrets.MANIFEST_PASSPHRASE }}
        run: .github/workflows/scripts/update_manifest.sh
        shell: bash
