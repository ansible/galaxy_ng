---
name: Docker Compose Integration
on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - "main"
      - "stable-*"
    tags:
      - '**'
  schedule:
    # * is a special character in YAML so you have to quote this string
    # runs at 3:00 UTC daily
    - cron: '00 3 * * *'
  workflow_dispatch:

jobs:
  integration:
    strategy:
      fail-fast: false
      matrix:
        env:
          - { TEST_PROFILE: standalone, HUB_TEST_MARKS: "deployment_standalone or all" }
          - { TEST_PROFILE: insights, HUB_TEST_MARKS: "deployment_cloud or all" }
          - { TEST_PROFILE: community, HUB_TEST_MARKS: "deployment_community" }
          - { TEST_PROFILE: standalone, HUB_TEST_MARKS: "x_repo_search" }
          - { TEST_PROFILE: standalone, HUB_TEST_MARKS: "iqe_rbac_test" }
          - { TEST_PROFILE: certified-sync, HUB_TEST_MARKS: "sync" }
          - { TEST_PROFILE: standalone, HUB_TEST_MARKS: "rbac_parallel_group_1" }
          - { TEST_PROFILE: standalone, HUB_TEST_MARKS: "rbac_parallel_group_2" }

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v6
        with:
          python-version: "3.10"

      - name: sudo apt update
        run: |
          sudo apt update

      - name: (Linux) Install docker compose
        run: |
          COMPOSE_VERSION=v2.34.0
          DOCKER_CONFIG=${DOCKER_CONFIG:-${HOME}/.docker}
          mkdir -p $DOCKER_CONFIG/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
          chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose
          docker version
          docker compose version
      - name: Install python requirements and podman
        run: |
          sudo apt-get install -y libsasl2-dev python-dev-is-python3 libldap2-dev libssl-dev podman
          pip install requests

      - name: Checkout DAB branch if needed
        env:
          PR_BODY: ${{ github.event.pull_request.body }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: .ci/scripts/get_dab_for_pr.py

      - name: Spin up dev/compose/${{ matrix.env.TEST_PROFILE }}.yaml
        run: |
          USER_ID=$(id --user) docker compose -f dev/compose/${{ matrix.env.TEST_PROFILE }}.yaml up --detach

      - name: Export environment variables to host
        if: ${{ matrix.env.TEST_PROFILE != 'certified-sync' }}
        run: |
          docker compose -f dev/compose/${{ matrix.env.TEST_PROFILE }}.yaml exec manager /bin/bash -c 'env | grep -v -w "HOME"' >> $GITHUB_ENV

      - name: Export environment variables to host (certified-sync)
        if: ${{ matrix.env.TEST_PROFILE == 'certified-sync' }}
        run: |
          docker compose -f dev/compose/${{ matrix.env.TEST_PROFILE }}.yaml exec standalone-manager /bin/bash -c 'env | grep -v -w "HOME"' >> $GITHUB_ENV

      - run: cat $GITHUB_ENV

      - name: Wait for manager service ready
        run: |
          echo "Waiting for manager service to be ready..."
          max_wait=90  # 1.5 minutes
          start_time=$(date +%s)

          if [ "${{ matrix.env.TEST_PROFILE }}" == "certified-sync" ]; then
            CONTAINER_NAME="compose-standalone-manager-1"
            SERVICE_NAME="standalone-manager"
          else
            CONTAINER_NAME="compose-manager-1"
            SERVICE_NAME="manager"
          fi

          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))

            if [ $elapsed -gt $max_wait ]; then
              echo "❌ Timeout after ${max_wait}s"
              echo "📋 Recent manager logs:"
              docker logs --tail=20 "$CONTAINER_NAME" 2>/dev/null || echo "Could not retrieve logs"
              docker compose -f dev/compose/${{ matrix.env.TEST_PROFILE }}.yaml ps
              exit 1
            fi

            echo "⏱️  Checking $SERVICE_NAME logs for READY... (${elapsed}s elapsed)"

            # Check if container is running first
            if ! docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
              echo "🔴 $SERVICE_NAME: container not found or not running"
              sleep 2
              continue
            fi

            # Check logs for READY indicator
            if docker logs "$CONTAINER_NAME" 2>/dev/null | grep -q "### READY ###"; then
              echo "✅ $SERVICE_NAME is READY!"
              break
            else
              echo "🟡 $SERVICE_NAME: waiting for READY signal in logs"
              sleep 2
            fi
          done

      - name: Checking for uncommitted migrations...
        if: ${{ matrix.env.TEST_PROFILE != 'certified-sync' }}
        run: docker exec -t compose-manager-1 bash -c "django-admin makemigrations galaxy --check --dry-run"

      - name: Checking for uncommitted migrations... (certified-sync)
        if: ${{ matrix.env.TEST_PROFILE == 'certified-sync' }}
        run: docker exec -t compose-standalone-manager-1 bash -c "django-admin makemigrations galaxy --check --dry-run"

      - name: Install integration requirements
        run: |
          pip install -r integration_requirements.txt

      - name: Run integration tests
        run: |
          pytest -v -r sx --color=yes -m '${{ matrix.env.HUB_TEST_MARKS }}' galaxy_ng/tests/integration
        env:
          GALAXYKIT_SLEEP_SECONDS_POLLING: ".5"
          GALAXYKIT_SLEEP_SECONDS_ONETIME: ".5"
          GALAXYKIT_POLLING_MAX_ATTEMPTS: "50"
          GALAXY_SLEEP_SECONDS_POLLING: ".5"
          GALAXY_SLEEP_SECONDS_ONETIME: ".5"
          GALAXY_POLLING_MAX_ATTEMPTS: "50"

      - name: Logs
        if: always()
        run: |
          set +e
          docker ps -a
          echo ::group::MIGRATION_LOGS
          docker logs --tail=10000 compose-migrations-1 || true
          docker logs --tail=10000 compose-standalone-migrations-1 || true
          docker logs --tail=10000 compose-insights-migrations-1 || true
          echo ::endgroup::
          echo ::group::MANAGER_LOGS
          docker logs --tail=10000 compose-manager-1
          docker logs --tail=10000 compose-standalone-manager-1
          echo ::endgroup::
          echo ::group::WORKER_LOGS
          docker logs --tail=10000 compose-worker-1
          docker logs --tail=10000 compose-standalone-worker-1
          echo ::endgroup::
          echo ::group::CONTENT_LOGS
          docker logs --tail=10000 compose-content-1
          docker logs --tail=10000 compose-standalone-content-1
          echo ::endgroup::
          echo ::group::API_LOGS
          docker logs --tail=10000 compose-api-1
          docker logs --tail=10000 compose-standalone-api-1
          echo ::endgroup::
          echo ::group::DEPENDENCIES
          docker exec compose-manager-1 bash -c "pip list && pip install pipdeptree && pipdeptree"
          docker exec compose-standalone-manager-1 bash -c "pip list && pip install pipdeptree && pipdeptree"
          echo ::endgroup::
          curl -u "${{ env.DJANGO_SUPERUSER_USERNAME }}:${{ env.DJANGO_SUPERUSER_PASSWORD }}" -L http://localhost:5001${{ env.PULP_GALAXY_API_PATH_PREFIX }}pulp/api/v3/status/ | jq || true
