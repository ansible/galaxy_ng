#!/bin/bash

set -o nounset
set -o errexit

# the internal mechanisms for installing and testing do not
# work if the checkout path is not named "galaxy_ng", so
# this script should -always- abort if that is not the case.
CWD=$(basename $(pwd))
if [[ "${CWD}" != "galaxy_ng" ]]; then
    cat >&2 <<EOF
ERROR: The checkout directory -must- be named galaxy_ng. A different
       name can cause many unintended behaviors inside the containers
EOF
    exit 1
fi

if [[ -f '.compose.env' ]]; then
  # export variables from .compose.env but only if the var is not already set.
  eval "$(grep -v '^#' .compose.env | sed -E 's|^(.+)=(.*)$|export \1=${\1:-\2}|g' | xargs -L 1)"
fi

if [[ -z "${COMPOSE_PROFILE:-}" ]]; then
  cat >&2 <<EOF
ERROR: The \$COMPOSE_PROFILE environment variable MUST be set.
       The the easiest way to to this is to create a .compose.env file by running:

           \$ cp .compose.env.example .compose.env
EOF
  exit 1
fi

echo "INFO: Using compose profile ${COMPOSE_PROFILE}" >&2
echo "INFO: ${DEV_SOURCE_PATH:-No} packages installed from source" >&2
echo "INFO: [${DEV_EXTRAS_REQUIRE:-}] extra requirement for galaxy_ng" >&2
echo "INFO: Image suffix ${DEV_IMAGE_SUFFIX:-is unset}" >&2
echo "INFO: Volume suffix ${DEV_VOLUME_SUFFIX:-${DEV_IMAGE_SUFFIX:-is unset}}" >&2

# choose between requirements.standalone.txt and requirements.insights.txt based on the COMPOSE_PROFILE
declare -xr REQUIREMENT_FILENAME="requirements.$(echo $COMPOSE_PROFILE | cut -d "-" -f 1).txt"
echo "INFO: Using requirements file ${REQUIREMENT_FILENAME}" >&2

compose_args=(
  -f 'dev/docker-compose.yml'
  -f "dev/${COMPOSE_PROFILE}/docker-compose.yml"
)

if [[ -z "${ANSIBLE_HUB_UI_PATH:-}" ]]; then
    cat >&2 << EOF
INFO: \$ANSIBLE_HUB_UI_PATH is unset.
    If you want to run the UI inside compose please set \$ANSIBLE_HUB_UI_PATH
    to the location of your local copy of https://github.com/ansible/ansible-hub-ui.
EOF
else
    compose_args+=(
      -f 'dev/common/docker-compose-ui.yaml'
      -f "dev/${COMPOSE_PROFILE}/docker-compose-ui.yaml"
    )
fi

declare -xr DEV_SOURCE_PATH=${DEV_SOURCE_PATH:-galaxy_ng}
declare -xr COMPOSE_CONTEXT=".."
declare -xr LOCK_REQUIREMENTS="${LOCK_REQUIREMENTS:-1}"
declare -xr COMPOSE_PROFILE="${COMPOSE_PROFILE}"
declare -xr ENABLE_SIGNING="${ENABLE_SIGNING:-1}"
declare -xr DEV_IMAGE_SUFFIX="${DEV_IMAGE_SUFFIX:-}"
declare -xr DEV_VOLUME_SUFFIX="${DEV_VOLUME_SUFFIX:-${DEV_IMAGE_SUFFIX}}"
declare -xr COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:-galaxy_ng${DEV_IMAGE_SUFFIX:-}}"
declare -xr WITH_DEV_INSTALL="${WITH_DEV_INSTALL:-1}"
declare -xr DEV_EXTRAS_REQUIRE="${DEV_EXTRAS_REQUIRE:-}"

exec docker-compose "${compose_args[@]}" "$@"
