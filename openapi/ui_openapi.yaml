---
openapi: "3.0.0"

info:
  version: 0.1.0
  title: Unstable internal _ui API for Red Hat Automation Hub
  license:
    name: Apache-2.0
  description: |
    # Introduction

    **NOTE: This is not a stable API and should not be relied upon.**


    This is the <a href="https://www.openapis.org">OpenAPI</a> specification
    for the **Red Hat Ansible Automation Hub** _ui API.


    ## OpenAPI Information
    <a target="_top" href="https://swagger.io/docs/specification/about/">Swagger.io OpenAPI documentation</a>

    <a target="_top" href="https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md">OpenAPI Specification</a>

    <a target="_top" href="https://github.com/ansible/galaxy-api/blob/master/openapi/openapi.yaml">Download the Automation Hub OpenAPI Specification</a>.


    # API Conventions
    ## Pagination

    Resource lists are always paginated.

    This pagination format is based on the
    <a href="https://jsonapi.org/format/#document-structure">JSON API document
    structure.</a>

     The response will look similar to this:

    ```json

    {
      "meta": {
        "count": 5
      },
      "links": {
        "first": "/namespaces/?offset=0&limit=1",
        "last": "/namespaces/?offset=7&limit=1",
        "next": "/namespaces/?offset=5&limit=1",
        "previous": "/namespaces/?offset=3&limit=1"
      },
      "data": [
        {
          "name": "my_namespace"
        }
      ]
    }
    ```

    ## Errors

    Error responses always have a top level object with an 'errors' field.

    The value of the 'errors' field is a list of Error objects.

    Example `Errors` response for a 404 on `GET /unicorn/11`

    ```json
      {
       "errors": [
        {
          "code": "not_found",
          "detail": "Record /unicorn/11 was not found",
          "title": "Record not found.",
          "status": "404",
          "source": {
            "parameter": "string",
            "pointer": "string"
            }
          }
      ]
    }
    ```


paths:

  # -------------------------------------
  # UI: Collections
  # -------------------------------------

  '/_ui/collections/':
    get:
      summary: List Collections (UI)
      operationId: listCollectionsUi
      parameters:
        - $ref: '#/components/parameters/PageOffset'
        - $ref: '#/components/parameters/PageLimit'
        - $ref: '#/components/parameters/SearchKeyword'
        - $ref: '#/components/parameters/SearchName'
        - $ref: '#/components/parameters/SearchNamespace'
        - $ref: '#/components/parameters/SearchTag'
        - $ref: '#/components/parameters/SearchVersion'
      tags:
        - 'UI: Collections'
      responses:
        '200':
          description: 'Paginated list of collections'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionPageUi'
        'default':
          $ref: '#/components/responses/Errors'

  '/_ui/collections/{namespace}/{name}/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: Get Collection (UI)
      operationId: getCollectionUi
      tags:
        - 'UI: Collections'
      parameters:
        - $ref: '#/components/parameters/SearchVersion'
      responses:
        '200':
          description: 'A collection object'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionUi'
        'default':
          $ref: '#/components/responses/Errors'

  '/_ui/collections/{namespace}/{name}/versions/':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
    get:
      summary: Get Collection version summarys(UI)
      operationId: getCollectionUiVersionSummary
      tags:
        - 'UI: Collections'
      responses:
        '200':
          description: 'Paginated list of Version summaries'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionUiVersionUiSummaryPage'
        'default':
          $ref: '#/components/responses/Errors'

  '/_ui/collections/{namespace}/{name}/versions/{version}':
    parameters:
      - $ref: '#/components/parameters/CollectionNamespaceName'
      - $ref: '#/components/parameters/CollectionName'
      - $ref: '#/components/parameters/SemanticVersion'
    get:
      summary: Get Collection version summarys(UI)
      operationId: getCollectionUiVersionSummaryDetail
      tags:
        - 'UI: Collections'
      responses:
        '200':
          description: 'A collection version for UI'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionUi'
        'default':
          $ref: '#/components/responses/Errors'

  # -------------------------------------
  # UI: Imports
  # -------------------------------------

  '/_ui/imports/collections/':
    get:
      summary: List collections (UI)
      operationId: listCollectionImportsUi
      parameters:
        - description: 'The collection namespace name'
          in: query
          name: namespace
          required: true
          schema:
            $ref: '#/components/schemas/NamespaceName'
      tags:
        - 'UI: Imports'
      responses:
        '200':
          $ref: '#/components/responses/UiCollectionImportList'
        'default':
          $ref: '#/components/responses/Errors'

  # -------------------------------------
  # UI: Namespaces
  # -------------------------------------

  '/_ui/namespaces/':
    get:
      summary: List namespaces (UI)
      operationId: listNamespacesUi
      tags:
        - 'UI: Namespaces'
      responses:
        '200':
          description: 'Paginated list of Namespaces'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespacesPage'
        'default':
          $ref: '#/components/responses/Errors'

  '/_ui/namespaces/{name}/':
    parameters:
      - description: 'Namespace name'
        in: path
        name: name
        required: true
        schema:
          $ref: '#/components/schemas/NamespaceName'
    get:
      summary: Get Namespace (UI)
      operationId: getNamespaceUi
      tags:
        - 'UI: Namespaces'
      responses:
        '200':
          $ref: '#/components/responses/Namespace'
        'default':
          $ref: '#/components/responses/Errors'
    put:
      summary: Update Namespace (UI)
      operationId: updateNamespaceUi
      tags:
        - 'UI: Namespaces'
      requestBody:
        $ref: '#/components/requestBodies/Namespace'
      responses:
        '200':
          $ref: '#/components/responses/Namespace'
        'default':
          $ref: '#/components/responses/Errors'

  # -------------------------------------
  # UI: Tags
  # -------------------------------------

  '/_ui/tags/':
    get:
      summary: 'List Tags (UI)'
      operationId: listTagsUi
      tags:
        - 'UI: Tags'
      responses:
        '200':
          $ref: '#/components/responses/TagList'
        'default':
          $ref: '#/components/responses/Errors'

  # -------------------------------------
  # UI: Users
  # -------------------------------------

  '/_ui/users/':
    get:
      summary: List Users (UI)
      operationId: listUsersUi
      tags:
        - 'Ui: Users'
      responses:
        '200':
          $ref: '#/components/responses/UserList'
        'default':
          $ref: '#/components/responses/Errors'


  '/_ui/users/{id}/':
    get:
      summary: Get User (UI)
      operationId: getUserUi
      tags:
        - 'UI: Users'
      parameters:
        - description: 'Username'
          in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/User'
        'default':
          $ref: '#/components/responses/Errors'

  # -------------------------------------
  # UI: Profile
  # -------------------------------------

  '/_ui/profile/':
    get:
      summary: Get Profile (UI)
      operationId: getProfileUi
      description: Returns information about the current User.
      tags:
        - 'UI: Profile'
      responses:
        '200':
          $ref: '#/components/responses/User'
        'default':
          $ref: '#/components/responses/Errors'

components:
  schemas:
    Author:
      description: 'Author of a collection or role'
      type: string
      format: email
      # TODO: add author validation pattern
      example: 'Adrian Likins <alikins@redhat.com>'

    CollectionName:
      description: 'The name of a Collection'
      type: string
      example: 'my_collection'
      pattern: '^(?!.*__)[a-z]+[0-9a-z_]*$'

    CollectionUi:
      title: 'CollectionUi'
      description: 'Detailed info about a collection used by the ui'
      type: object
      properties:
        all_versions:
          readOnly: true
          type: array
          items:
            $ref: '#/components/schemas/CollectionUiVersionSummary'
        download_count:
          type: integer
          readOnly: true
        id:
          readOnly: true
          type: integer
        latest_version:
          $ref: '#/components/schemas/CollectionUiVersionDetail'
        name:
          maxLength: 64
          type: string
        namespace:
          readOnly: true
          $ref: '#/components/schemas/CollectionUiNamespace'
      required:
        - name
        - latest_version

    CollectionUiDocsBlob:
      description: Rendered docs for UI
      type: object
      properties:
        collection_readme:
          $ref: '#/components/schemas/RenderedDocumentation'
        documentation_files:
          type: array
          items:
            $ref: '#/components/schemas/RenderedDocumentation'
        contents:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/PluginContent'
              - $ref: '#/components/schemas/RoleContent'
              - $ref: '#/components/schemas/PlaybookContent'

    CollectionUiNamespace:
      description: 'The v1 style namespace returned by _ui'
      type: object
      properties:
        id:
          readOnly: true
          type: integer
        description:
          maxLength: 255
          type: string
        name:
          maxLength: 512
          type: string
        avatar_url:
          maxLength: 256
          nullable: true
          type: string
          format: uri
        company:
          maxLength: 256
          nullable: true
          type: string
      required:
        - name

    CollectionUiVersionSummary:
      type: object
      title: "Version Summary"
      properties:
        id:
          type: integer
        version:
          type: string
        created:
          description: 'Timestamp when this object was created.'
          readOnly: true
          type: string
      required:
        - version

    CollectionUiVersionBase:
      type: object
      title: "Version base"
      properties:
        contents:
          type: array
          items:
            $ref: '#/components/schemas/ContentSummary'
        metadata:
          $ref: '#/components/schemas/CollectionUiVersionMetadata'
        docs_blob:
          $ref: '#/components/schemas/CollectionUiDocsBlob'
      required:
        - metadata
        - contents

    CollectionUiVersionUiDetail:
      type: object
      title: "Version details for ui for a specific collection version"
      properties:
        metadata:
          $ref: '#/components/schemas/CollectionUiVersionMetadata'
        docs_blob:
          $ref: '#/components/schemas/CollectionUiDocsBlob'

    CollectionUiVersionUiSummary:
      type: object
      title: "Version summary for ui display of a specific collection"
      properties:
        contents:
          type: array
          items:
            $ref: '#/components/schemas/ContentSummary'
        created_at:
          description: 'Timestamp when this object was created.'
          readOnly: true
          type: string
          format: date-time
        docs_blob:
          $ref: '#/components/schemas/CollectionUiDocsBlob'
        name:
          maxLength: 64
          type: string
        namespace:
          maxLength: 512
          type: string
        version:
          $ref: '#/components/schemas/SemanticVersion'

    CollectionUiVersionUiSummaryPage:
      description: 'A page of a list of Version summaries for ui'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Version summaries for this Page'
              title: 'UI Version Summary'
              type: array
              items:
                $ref: '#/components/schemas/CollectionUiVersionUiSummary'
          required:
            - data

    CollectionUiVersionDetail:
      title: "Version Detail"
      allOf:
        - $ref: '#/components/schemas/CollectionUiVersionSummary'
        - $ref: '#/components/schemas/CollectionUiVersionBase'

    CollectionUiVersionMetadata:
      title: 'Metadata (UI)'
      description: "The Collection Version metadata from collections galaxy.yml or MANIFEST.JSON"
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
        authors:
          title: 'Authors'
          description: 'A list of collection authors'
          type: array
          items:
            $ref: '#/components/schemas/Author'
        license:
          $ref: '#/components/schemas/SPDXLicenseId'
        description:
          description: 'Description of the collection'
          type: string
          nullable: true
        homepage:
          type: string
          format: uri
        documentation:
          description: 'Documentation URL'
          type: string
          format: uri
          nullable: true
        issues:
          description: 'URL of issues or bug tracking'
          type: string
          format: uri
          nullable: true
        repository:
          description: 'SCM repository for collection'
          type: string
          format: uri
          nullable: true

    PluginContent:
      description: "Info about Plugins"
      title: "Plugin"
      type: object
      properties:
        content_type:
          type: string
        content_name:
          type: string
        readme_filename:
          type: string
        readme_html:
          type: string
        docs_strings:
          type: object
          description: "The doc strings from a plugin"
          properties:
            doc:
              type: object
            metadata:
              type: object
            return:
              type: object
            examples:
              type: string

    RoleContent:
      description: "Info about a Role"
      type: object
      title: "Role"
      properties:
        content_type:
          type: string
        content_name:
          type: string
        readme_filename:
          type: string
        readme_html:
          type: string

    PlaybookContent:
      description: "Info about a playbook"
      type: object
      title: "Playbook"

    RenderedDocumentation:
      description: "Documentation in html rendered from markdown or rst"
      title: "Rendered Documentation File"
      type: string

    ContentSummary:
      description: "Summary of info about a plugin, role, or other content"
      title: "Content Summary"
      type: object
      properties:
        name:
          type: string
        content_type:
          type: string
        description:
          type: string

    CollectionPageUi:
      description: 'A page of a list of CollectionItems (UI)'
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/CollectionUi'
          required:
            - data


    # -------------------------------------
    # Schemas: Errors
    # -------------------------------------

    Errors:
      title: 'Errors'
      description: "A list of JSON API Error objects"
      type: object
      externalDocs:
        description: 'JSON API Error Specification'
        url: 'https://jsonapi.org/format/#errors'
      properties:
        errors:
          type: array
          title: 'Errors'
          items:
            $ref: '#/components/schemas/Error'
          minItems: 1
      required:
        - errors

    Error:
      title: 'Error'
      description: "A JSON API Error object"
      externalDocs:
        description: 'JSON API Error Specification'
        url: 'https://jsonapi.org/format/#error-objects'
      type: object
      properties:
        code:
          description: 'Unique identifier for the error'
          type: string
          example: 'not_found'
        detail:
          type: string
          description: >
            A human-readable explanation specific to this
            occurrence of the problem
          example: 'Record /unicorn/11 was not found'
        title:
          type: string
          description: 'A short, human-readable summary of the problem'
          example: 'Record not found.'
        status:
          type: string
          description: 'String representation of HTTP status code'
          example: '404'
        source:
          type: object
          properties:
            parameter:
              description: >
                A string indicating which URI query parameter
                caused the error.
              type: string
            pointer:
              description: >
                A JSON Pointer [RFC6901] to the associated entity
                in the request document
              type: string
      required:
        - detail
        - status

    # -------------------------------------
    # Schemas: Namespaces
    # -------------------------------------

    Namespace:
      title: 'Namespace'
      description: 'An Ansible content Namespace'
      type: object
      properties:
        name:
          readOnly: true
          $ref: '#/components/schemas/NamespaceName'
        company:
          description: Namespace owner company name
          type: string
          maxLength: 64
        email:
          description: Namespace contact email
          type: string
          format: email
          maxLength: 256
        avatar_url:
          description: Namespace logo URL
          type: string
          format: uri
          maxLength: 256
        description:
          description: Namespace brief description
          type: string
          maxLength: 256
        resource_page:
          description: Namespace resource page in Markdown format.
          type: string
        links:
          description: Related links
          type: array
          items:
            $ref: '#/components/schemas/NamespaceLink'

    NamespaceLink:
      title: Namespace Link
      type: object
      description: Namespace URL links
      properties:
        name:
          type: string
          maxLength: 32
          example: Homepage
        url:
          type: string
          format: uri
          maxLength: 256
          example: http://example.com
      required:
        - name
        - url

    NamespaceName:
      title: 'NamespaceName'
      description: >
          Namespace name. Must be lower case containing
          only alphanumeric characters and underscores.
      type: string
      maxLength: 64
      example: 'my_namespace'
      pattern: '^(?!.*__)[a-z]+[0-9a-z_]*$'

    NamespacesPage:
      description: "Paginated list of Namespaces"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Namespaces for this page'
              title: 'Namespaces'
              type: array
              items:
                $ref: '#/components/schemas/Namespace'
          required:
            - data

    NamespaceSummary:
      type: object
      title: 'Namespace Summary'
      properties:
        name:
          $ref: '#/components/schemas/NamespaceName'
        id:
          type: integer
        href:
          description: 'Link to the Namespace'
          type: string
          format: uri

    # -------------------------------------
    # Schemas: Pagination
    # -------------------------------------

    PageInfo:
      description: 'Pagination info'
      title: 'Page Info'
      properties:
        meta:
          $ref: '#/components/schemas/PageMeta'
        links:
          $ref: '#/components/schemas/PageLinks'
      required:
        - meta
        - links

    PageLinks:
      type: object
      title: 'PageLinks'
      properties:
        first:
          type: string
          description: 'Link to first page'
          format: uri
          example: '/namespaces/?offset=0&limit=1'
        last:
          type: string
          description: 'Link to last page'
          format: uri
          example: '/namespaces/?offset=7&limit=1'
        next:
          type: string
          description: 'Link to next page'
          format: uri
          example: '/namespaces/?offset=5&limit=1'
          nullable: true
        previous:
          type: string
          description: 'Link to previous page'
          format: uri
          example: '/namespaces/?offset=3&limit=1'
          nullable: true
      required:
        - first
        - last
        - next
        - previous

    PageMeta:
      title: 'PageMeta'
      type: object
      properties:
        count:
          description: 'The number of items in this Page'
          type: integer
          example: 5
      required:
        - count

    SemanticVersion:
      description: 'A version string in the Semantic Version form'
      type: string
      pattern: ^((([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?)$
      example: '1.0.1'

    SemanticVersionSpec:
      description: 'A string to match against SemanticVersion'
      type: string
      example: '>=1.0.0'

    SPDXLicenseId:
      description: 'A SPDX license id'
      type: string
      # TODO: This could in theory be an enum

    Tag:
      description: 'Tag'
      title: 'Tag'
      type: object
      properties:
        name:
          maxLength: 32
          type: string
        id:
          description: 'Database ID for this object.'
          readOnly: true
          type: integer
        modified:
          description: 'Timestamp when this object was last modified.'
          readOnly: true
          type: string
        created:
          description: 'Timestamp when this object was created.'
          readOnly: true
          type: string
      required:
        - id
        - name

    TagsPage:
      description: "Paginated list of Tags"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Tags for this page'
              title: 'Tags'
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          required:
            - data

    UiCollectionImport:
      description: 'Detailed info about a collection (UI)'
      title: 'Collection Import (UI)'
      type: object
      # TODO: add the properties
      properties:
        id:
          type: integer
        href:
          type: string
          format: uri
        type:
          description: The type of content that was imported
          type: string
          example: 'collection'
          # TODO: could be enum
        state:
          type: string
          # TODO: could be enum
        started_at:
          type: string
          format: date-time
          example: '2019-07-23T09:33:15.236371-04:00'
        finished_at:
          type: string
          format: date-time
          example: '2019-07-23T09:33:22.387688-04:00'
        namespace:
          $ref: '#/components/schemas/NamespaceSummary'
        name:
          $ref: '#/components/schemas/CollectionName'
        version:
          $ref: '#/components/schemas/SemanticVersion'
      required:
        - id
        - href
        - state
        - name
        - namespace
        - version
        - started_at
        - finished_at

    UiCollectionImportPage:
      description: "Paginated list of collection imports (UI)"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of collection imports (ui) for this Page'
              title: 'Collection Imports'
              type: array
              items:
                $ref: '#/components/schemas/UiCollectionImport'
          required:
            - data

    User:
      title: 'User'
      description: 'Automation Hub User'
      type: object

    UsersPage:
      description: "Paginated list of Users"
      allOf:
        - $ref: '#/components/schemas/PageInfo'
        - type: object
          properties:
            data:
              description: 'List of Users for this Page'
              title: 'Users'
              type: array
              items:
                $ref: '#/components/schemas/User'
          required:
            - data


  parameters:

    CollectionNamespaceName:
      description: 'The collection namespace name'
      in: path
      name: namespace
      required: true
      schema:
        $ref: '#/components/schemas/NamespaceName'

    CollectionName:
      description: 'The collection name'
      in: path
      name: name
      required: true
      schema:
        type: string
        pattern: ^(?!.*__)[a-z]+[0-9a-z_]*$'

    PageLimit:
      description: 'Number of results to return per page.'
      in: query
      name: limit
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100

    PageOffset:
      description: 'Page offset number within the paginated result set'
      in: query
      name: offset
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0

    Search:
      description: 'Term to search for'
      in: query
      name: search
      required: false
      schema:
        type: string

    SearchKeyword:
      description: 'Search for a keyword'
      in: query
      name: keywords
      required: false
      schema:
        type: string

    SearchName:
      description: 'Search for a name'
      in: query
      name: names
      required: false
      schema:
        type: string

    SearchNamespace:
      description: 'Search for a namespace'
      in: query
      name: namespaces
      required: false
      schema:
        type: string

    SearchTag:
      description: 'Search for a tag'
      in: query
      name: tags
      required: false
      schema:
        type: string

    SearchVersion:
      description: 'Search for a version'
      in: query
      name: version
      required: false
      schema:
        $ref: '#/components/schemas/SemanticVersion'

    SemanticVersion:
      description: 'A Semantic Version string'
      in: path
      name: version
      required: true
      schema:
        $ref: '#/components/schemas/SemanticVersion'

  requestBodies:

    Namespace:
      description: "A Namespace body"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Namespace'

  responses:
    Errors:
      description: 'Errors'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    Namespace:
      description: 'Response with a Namespace'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Namespace'

    TagList:
      description: 'Response containing a page of Tags'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagsPage'

    UiCollectionImportList:
      description: 'Response containing a page of Collection imports (UI)'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UiCollectionImportPage'

    Unauthorized:
      description: 'Unauthorized (401)'
      headers:
        WWW-Authenticate:
          schema:
            type: string
            enum:
              - Basic
              - Token
              - Bearer
          description: >
            Authentication Types:
             * `Basic` - HTTP Basic Auth
             * `Token` - Django style auth token, used with Galaxy API v2.
             * `Bearer` - Bearer token, used with Galaxy API v3
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Errors'

    User:
      description: 'Response with an User'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'

    UserList:
      description: 'Paginated list of Users'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UsersPage'
