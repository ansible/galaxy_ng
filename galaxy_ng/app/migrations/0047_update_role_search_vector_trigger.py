# Generated by Django 4.2.7 on 2023-11-15 15:55

from django.db import migrations

REBUILD_ROLES_TS_VECTOR = """
UPDATE galaxy_legacyrole SET name = name;
"""

CREATE_ROLE_TS_VECTOR_TRIGGER = """
CREATE OR REPLACE FUNCTION update_role_ts_vector()
    RETURNS TRIGGER
    AS $$
DECLARE
    _search_vector tsvector;
    _namespace text;
BEGIN
    _namespace := (select name from galaxy_legacynamespace WHERE id = NEW.namespace_id);
    _search_vector := ((((
        setweight(to_tsvector(COALESCE(_namespace, '')), 'A')
        || setweight(to_tsvector(COALESCE(NEW."name", '')), 'A'))
        || setweight(to_tsvector(COALESCE(((NEW."full_metadata"->'tags'))::text, '')), 'B')) 
        || setweight(to_tsvector(COALESCE(((NEW."full_metadata"->'platforms'))::text, '')), 'C')) 
        || setweight(to_tsvector(COALESCE((NEW."full_metadata"->>'description'), '')), 'D'));

    INSERT INTO galaxy_legacyrolesearchvector(role_id,search_vector,modified)
        VALUES(new.id,_search_vector,current_timestamp)
    ON CONFLICT (role_id)
        DO UPDATE SET
            search_vector = _search_vector, modified = current_timestamp;
    RETURN NEW;
END;
$$
LANGUAGE plpgsql;

DROP TRIGGER IF EXISTS update_ts_vector ON galaxy_legacyrole;

CREATE TRIGGER update_ts_vector
    AFTER INSERT OR UPDATE
    ON galaxy_legacyrole
    FOR EACH ROW
EXECUTE PROCEDURE update_role_ts_vector();
"""

DROP_ROLE_TS_VECTOR_TRIGGER = """
DROP TRIGGER IF EXISTS update_ts_vector ON galaxy_legacyrole;
DROP FUNCTION IF EXISTS update_role_ts_vector();
"""


class Migration(migrations.Migration):
    dependencies = [
        ("galaxy", "0046_legacyrolesearchvector"),
    ]

    operations = [
        migrations.RunSQL(
            sql=CREATE_ROLE_TS_VECTOR_TRIGGER,
            reverse_sql=DROP_ROLE_TS_VECTOR_TRIGGER,
        ),
        migrations.RunSQL(
            sql=REBUILD_ROLES_TS_VECTOR,
            reverse_sql=migrations.RunSQL.noop,
        )
    ]
