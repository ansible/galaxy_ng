# coding: utf-8

"""
    Bindings for Pulp Ansible API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from galaxy_pulp.configuration import Configuration


class CollectionImport(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'state': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'started_at': 'datetime',
        'finished_at': 'datetime',
        'error': 'object',
        'messages': 'list[object]'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'started_at': 'started_at',
        'finished_at': 'finished_at',
        'error': 'error',
        'messages': 'messages'
    }

    def __init__(self, id=None, state=None, created_at=None, updated_at=None, started_at=None, finished_at=None, error=None, messages=None, local_vars_configuration=None):  # noqa: E501
        """CollectionImport - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._state = None
        self._created_at = None
        self._updated_at = None
        self._started_at = None
        self._finished_at = None
        self._error = None
        self._messages = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if state is not None:
            self.state = state
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if started_at is not None:
            self.started_at = started_at
        if finished_at is not None:
            self.finished_at = finished_at
        if error is not None:
            self.error = error
        if messages is not None:
            self.messages = messages

    @property
    def id(self):
        """Gets the id of this CollectionImport.  # noqa: E501


        :return: The id of this CollectionImport.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionImport.


        :param id: The id of this CollectionImport.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this CollectionImport.  # noqa: E501


        :return: The state of this CollectionImport.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CollectionImport.


        :param state: The state of this CollectionImport.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def created_at(self):
        """Gets the created_at of this CollectionImport.  # noqa: E501


        :return: The created_at of this CollectionImport.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CollectionImport.


        :param created_at: The created_at of this CollectionImport.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this CollectionImport.  # noqa: E501


        :return: The updated_at of this CollectionImport.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CollectionImport.


        :param updated_at: The updated_at of this CollectionImport.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def started_at(self):
        """Gets the started_at of this CollectionImport.  # noqa: E501


        :return: The started_at of this CollectionImport.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this CollectionImport.


        :param started_at: The started_at of this CollectionImport.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """Gets the finished_at of this CollectionImport.  # noqa: E501


        :return: The finished_at of this CollectionImport.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this CollectionImport.


        :param finished_at: The finished_at of this CollectionImport.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def error(self):
        """Gets the error of this CollectionImport.  # noqa: E501


        :return: The error of this CollectionImport.  # noqa: E501
        :rtype: object
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CollectionImport.


        :param error: The error of this CollectionImport.  # noqa: E501
        :type: object
        """

        self._error = error

    @property
    def messages(self):
        """Gets the messages of this CollectionImport.  # noqa: E501


        :return: The messages of this CollectionImport.  # noqa: E501
        :rtype: list[object]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this CollectionImport.


        :param messages: The messages of this CollectionImport.  # noqa: E501
        :type: list[object]
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionImport):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectionImport):
            return True

        return self.to_dict() != other.to_dict()
